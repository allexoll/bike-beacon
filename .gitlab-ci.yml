# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Rust.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest


stages:          # List of stages for jobs, and their order of execution
  - checks
  - build

.cache: &cache
  cache:
    key: "shared-cache"
    paths:
      - target/ 

.tools: &tools
  <<: *cache
  before_script:
    - rustup target add thumbv6m-none-eabi
    - rustup component add rustfmt
    - rustup component add clippy
    - cargo install flip-link

.stable: &stable
  stage: build
  image: rustdocker/rust:stable
  <<: *cache
  <<: *tools

.beta: &beta
  image: rustdocker/rust:beta
  stage: build
  <<: *cache
  <<: *tools

.nightly: &nightly
  image: rustdocker/rust:nightly
  stage: build
  <<: *cache
  <<: *tools

checks:cargo:
  stage: checks
  <<: *cache
  script:
    - rustc --version && cargo --version
    - rustup component add clippy rustfmt
    - cargo fmt -p firmware --verbose -- --check
    - cargo clippy   

build:stable:
  <<: *stable
  script:
    - cargo build --target=thumbv6m-none-eabi
    - cargo build --release --target=thumbv6m-none-eabi

build:beta:
  <<: *beta
  script:
    - cargo build --target=thumbv6m-none-eabi
    - cargo build --release --target=thumbv6m-none-eabi

build:nightly:
  <<: *nightly
  script:
    - cargo build --target=thumbv6m-none-eabi
    - cargo build --release --target=thumbv6m-none-eabi
